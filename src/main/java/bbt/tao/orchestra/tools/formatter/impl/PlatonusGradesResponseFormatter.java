package bbt.tao.orchestra.tools.formatter.impl;

import bbt.tao.orchestra.dto.enu.platonus.FormattedGradesResponse;
import bbt.tao.orchestra.dto.enu.platonus.grades.*;
import bbt.tao.orchestra.tools.formatter.ToolResponseFormatter;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

@Component
public class PlatonusGradesResponseFormatter implements ToolResponseFormatter<FormattedGradesResponse> {

    private static final String NEW_LINE = "\n";
    private static final String DIVIDER = "---";
    private static final String EMOJI_BOOK = "üìö";
    private static final String EMOJI_CHART = "üìä";
    private static final String EMOJI_CALENDAR = "üìÖ";
    private static final String EMOJI_TEACHER = "üë®‚Äçüè´";
    private static final String EMOJI_WARNING = "‚ö†Ô∏è";
    private static final String EMOJI_STAR = "‚≠ê";
    private static final String EMOJI_CHECK = "‚úÖ";

    @Override
    public String format(FormattedGradesResponse responseData) {
        if (responseData == null || responseData.semesterPerformance() == null) {
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.";
        }

        StudentSemesterPerformance performance = responseData.semesterPerformance();
        StringBuilder md = new StringBuilder();

        // –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–º–µ—Å—Ç—Ä–µ
        appendHeader(md, performance);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        appendParsingIssues(md, performance.getParsingIssues());

        // –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
        appendSummaryTable(md, performance.getSubjects());

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
        appendDetailedSubjects(md, performance.getSubjects());

        return md.toString();
    }

    private void appendHeader(StringBuilder md, StudentSemesterPerformance performance) {
        md.append("# ").append(EMOJI_CHART).append(" –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã").append(NEW_LINE).append(NEW_LINE);

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        md.append("> ").append(EMOJI_CALENDAR).append(" **–ü–µ—Ä–∏–æ–¥:** ")
          .append(escapeMarkdown(performance.getAcademicYear())).append(" —É—á–µ–±–Ω—ã–π –≥–æ–¥, ")
          .append(escapeMarkdown(performance.getTerm())).append(" —Å–µ–º–µ—Å—Ç—Ä").append(NEW_LINE);

        if (performance.getStudentId() != null && !performance.getStudentId().trim().isEmpty()) {
            md.append("> ").append("üÜî **ID —Å—Ç—É–¥–µ–Ω—Ç–∞:** ")
              .append(escapeMarkdown(performance.getStudentId())).append(NEW_LINE);
        }

        md.append("> ").append(EMOJI_BOOK).append(" **–í—Å–µ–≥–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω:** ")
          .append(performance.getSubjects() != null ? performance.getSubjects().size() : 0)
          .append(NEW_LINE).append(NEW_LINE);
    }

    private void appendParsingIssues(StringBuilder md, List<String> parsingIssues) {
        if (parsingIssues != null && !parsingIssues.isEmpty()) {
            md.append("## ").append(EMOJI_WARNING).append(" –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö").append(NEW_LINE).append(NEW_LINE);
            for (String issue : parsingIssues) {
                md.append("- ").append(EMOJI_WARNING).append(" ").append(escapeMarkdown(issue)).append(NEW_LINE);
            }
            md.append(NEW_LINE);
        }
    }

    private void appendSummaryTable(StringBuilder md, List<SubjectPerformance> subjects) {
        if (subjects == null || subjects.isEmpty()) {
            md.append("## ").append(EMOJI_WARNING).append(" –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").append(NEW_LINE).append(NEW_LINE);
            md.append("–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.").append(NEW_LINE);
            return;
        }

        md.append("## ").append(EMOJI_STAR).append(" **–°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í**").append(NEW_LINE).append(NEW_LINE);

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        md.append("| ‚Ññ | –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ | –î–æ–ø—É—Å–∫ | –≠–∫–∑–∞–º–µ–Ω | –ò—Ç–æ–≥ (–±–∞–ª–ª–æ–≤) | –ë—É–∫–≤–∞ | –°—Ç–∞—Ç—É—Å |").append(NEW_LINE);
        md.append("|:---:|:---|:---:|:---:|:---:|:---:|:---:|").append(NEW_LINE);

        int index = 1;
        for (SubjectPerformance subject : subjects) {
            SubjectGradeAggregation agg = subject.getAggregatedGrades();
            String status = getGradeStatus(agg.getFinalLetterGrade());

            md.append("| ").append(index++).append(" | ")
              .append("**").append(escapeMarkdownTableContent(subject.getSubjectName())).append("** | ")
              .append(formatScoreWithStatus(agg.getAdmissionRating())).append(" | ")
              .append(formatScoreWithStatus(agg.getExamGrade())).append(" | ")
              .append(formatScoreWithStatus(agg.getFinalNumericGrade())).append(" | ")
              .append("**").append(formatScore(agg.getFinalLetterGrade())).append("** | ")
              .append(status).append(" |").append(NEW_LINE);
        }
        md.append(NEW_LINE);
    }

    private void appendDetailedSubjects(StringBuilder md, List<SubjectPerformance> subjects) {
        if (subjects == null || subjects.isEmpty()) return;

        md.append("## ").append(EMOJI_BOOK).append(" **–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –î–ò–°–¶–ò–ü–õ–ò–ù–ê–ú**").append(NEW_LINE).append(NEW_LINE);

        int subjectIndex = 1;
        for (SubjectPerformance subject : subjects) {
            appendSubjectDetails(md, subject, subjectIndex++);
        }
    }

    private void appendSubjectDetails(StringBuilder md, SubjectPerformance subject, int index) {
        SubjectGradeAggregation agg = subject.getAggregatedGrades();

        md.append("### ").append(index).append(". **").append(escapeMarkdown(subject.getSubjectName())).append("**").append(NEW_LINE).append(NEW_LINE);

        // –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
        appendGradeCards(md, agg);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        appendAdditionalGrades(md, agg);

        // –î–µ—Ç–∞–ª–∏ –ø–æ –≤–∏–¥–∞–º –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        appendActivityDetails(md, subject.getActivities());

        md.append(DIVIDER).append(NEW_LINE).append(NEW_LINE);
    }

    private void appendGradeCards(StringBuilder md, SubjectGradeAggregation agg) {
        md.append("#### **–†—É–±–µ–∂–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏**").append(NEW_LINE).append(NEW_LINE);

        // –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥ –¥–ª—è —Ä—É–±–µ–∂–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–µ–π
        md.append("| –ü–µ—Ä–∏–æ–¥ | –¢–ö –æ–±—â–∏–π | –†–ö | –†–µ–π—Ç–∏–Ω–≥ |").append(NEW_LINE);
        md.append("|:---|:---:|:---:|:---:|").append(NEW_LINE);
        md.append("| **–ü–µ—Ä–≤—ã–π —Ä—É–±–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å** | ")
          .append(formatScore(agg.getTk1TotalScore())).append(" | ")
          .append(formatScore(agg.getRk1Score())).append(" | ")
          .append(formatScore(agg.getR1Score())).append(" |").append(NEW_LINE);
        md.append("| **–í—Ç–æ—Ä–æ–π —Ä—É–±–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å** | ")
          .append(formatScore(agg.getTk2TotalScore())).append(" | ")
          .append(formatScore(agg.getRk2Score())).append(" | ")
          .append(formatScore(agg.getR2Score())).append(" |").append(NEW_LINE).append(NEW_LINE);

        // –ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
        md.append("#### **–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**").append(NEW_LINE).append(NEW_LINE);
        md.append("| –î–æ–ø—É—Å–∫ | –≠–∫–∑–∞–º–µ–Ω | –ò—Ç–æ–≥ (%) | –ò—Ç–æ–≥ (–ë—É–∫–≤–∞) |").append(NEW_LINE);
        md.append("|:---:|:---:|:---:|:---:|").append(NEW_LINE);
        md.append("| ").append(formatScoreWithEmoji(agg.getAdmissionRating())).append(" | ")
          .append(formatScoreWithEmoji(agg.getExamGrade())).append(" | ")
          .append(formatScoreWithEmoji(agg.getFinalNumericGrade())).append(" | ")
          .append("**").append(formatScore(agg.getFinalLetterGrade())).append("** |").append(NEW_LINE).append(NEW_LINE);
    }

    private void appendAdditionalGrades(StringBuilder md, SubjectGradeAggregation agg) {
        boolean hasAdditional = hasValue(agg.getCourseworkGrade()) ||
                               hasValue(agg.getPracticeGrade()) ||
                               hasValue(agg.getResearchGrade());

        if (hasAdditional) {
            md.append("#### **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏**").append(NEW_LINE).append(NEW_LINE);

            if (hasValue(agg.getCourseworkGrade())) {
                md.append("- **–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞:** `").append(formatScore(agg.getCourseworkGrade())).append("`").append(NEW_LINE);
            }
            if (hasValue(agg.getPracticeGrade())) {
                md.append("- **–ü—Ä–∞–∫—Ç–∏–∫–∞:** `").append(formatScore(agg.getPracticeGrade())).append("`").append(NEW_LINE);
            }
            if (hasValue(agg.getResearchGrade())) {
                md.append("- **–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞:** `").append(formatScore(agg.getResearchGrade())).append("`").append(NEW_LINE);
            }
            md.append(NEW_LINE);
        }
    }

    private void appendActivityDetails(StringBuilder md, List<SubjectActivityDetails> activities) {
        if (activities == null || activities.isEmpty()) return;

        md.append("#### **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∏–¥–∞–º –∑–∞–Ω—è—Ç–∏–π**").append(NEW_LINE).append(NEW_LINE);

        for (SubjectActivityDetails activity : activities) {
            md.append("##### **").append(escapeMarkdown(activity.getActivityName())).append("**").append(NEW_LINE);

            if (activity.getTeacher() != null && !activity.getTeacher().trim().isEmpty()) {
                md.append("> ").append(EMOJI_TEACHER).append(" **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:** ")
                  .append(escapeMarkdown(activity.getTeacher())).append(NEW_LINE).append(NEW_LINE);
            }

            // –¢–ö –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            md.append("**–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å:**").append(NEW_LINE);
            md.append("- –¢–ö1: `").append(formatScore(activity.getTk1Score())).append("`")
              .append(" | –¢–ö2: `").append(formatScore(activity.getTk2Score())).append("`").append(NEW_LINE).append(NEW_LINE);

            // –ù–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            appendWeeklyGrades(md, activity.getWeeklyGrades1_7(), "–ù–µ–¥–µ–ª–∏ 1-7");
            appendWeeklyGrades(md, activity.getWeeklyGrades8_15(), "–ù–µ–¥–µ–ª–∏ 8-15");

            md.append(NEW_LINE);
        }
    }

    private void appendWeeklyGrades(StringBuilder md, List<Grade> weeklyGrades, String period) {
        if (!hasValidWeeklyGrades(weeklyGrades)) return;

        md.append("**").append(period).append(":**").append(NEW_LINE);

        Map<String, String> gradeMap = weeklyGrades.stream()
                .collect(Collectors.toMap(
                        Grade::getControlPoint,
                        item -> {
                            if (item.isNotProvided()) return "–Ω.–ø.";
                            String value = item.getValue();
                            if (value == null || value.trim().isEmpty()) return "-";
                            return value.trim();
                        },
                        (v1, v2) -> v1
                ));

        md.append("| ");
        int startWeek = period.contains("1-7") ? 1 : 8;
        int endWeek = period.contains("1-7") ? 7 : 15;

        IntStream.rangeClosed(startWeek, endWeek).forEach(week ->
                md.append(week).append(" | ")
        );
        md.append(NEW_LINE);

        md.append("|");
        IntStream.rangeClosed(startWeek, endWeek).forEach(week ->
                md.append(":---:|")
        );
        md.append(NEW_LINE);

        md.append("| ");
        IntStream.rangeClosed(startWeek, endWeek).forEach(week -> {
            String grade = gradeMap.getOrDefault(String.valueOf(week), "-");
            md.append(formatWeeklyGrade(grade)).append(" | ");
        });
        md.append(NEW_LINE).append(NEW_LINE);
    }

    // Utility methods
    private String formatScore(String score) {
        return (score == null || score.trim().isEmpty()) ? "-" : score.trim();
    }

    private String formatScoreWithStatus(String score) {
        if (score == null || score.trim().isEmpty()) return "-";
        String trimmed = score.trim();
        try {
            double value = Double.parseDouble(trimmed);
            if (value >= 90) return trimmed + " " + EMOJI_STAR;
            if (value >= 75) return trimmed + " " + EMOJI_CHECK;
            if (value < 50) return trimmed + " " + EMOJI_WARNING;
        } catch (NumberFormatException e) {
            // –ù–µ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
        return trimmed;
    }

    private String formatScoreWithEmoji(String score) {
        if (score == null || score.trim().isEmpty()) return "-";
        String trimmed = score.trim();
        try {
            double value = Double.parseDouble(trimmed);
            if (value >= 90) return "üü¢ " + trimmed;
            if (value >= 75) return "üü° " + trimmed;
            if (value >= 50) return "üü† " + trimmed;
            return "üî¥ " + trimmed;
        } catch (NumberFormatException e) {
            return trimmed;
        }
    }

    private String formatWeeklyGrade(String grade) {
        if (grade.equals("–Ω.–ø.") || grade.equals("–Ω")) return grade;
        if (grade.equals("-")) return "-";
        try {
            double value = Double.parseDouble(grade);
            if (value >= 90) return "üü¢ " + grade;
            if (value >= 75) return "üü° " + grade;
            if (value >= 50) return "üü† " + grade;
            return "üî¥ " + grade;
        } catch (NumberFormatException e) {
            return grade;
        }
    }

    private String getGradeStatus(String letterGrade) {
        if (letterGrade == null || letterGrade.trim().isEmpty()) return "-";
        String grade = letterGrade.trim().toUpperCase();
        switch (grade) {
            case "A": case "A-": return "üü¢ –û—Ç–ª–∏—á–Ω–æ";
            case "B+": case "B": case "B-": return "üü° –•–æ—Ä–æ—à–æ";
            case "C+": case "C": case "C-": return "üü† –£–¥–æ–≤–ª–µ—Ç–≤.";
            case "D+": case "D": return "üî¥ –°–ª–∞–±–æ";
            case "F": return "‚ùå –ù–µ—É–¥–æ–≤–ª.";
            default: return grade;
        }
    }

    private boolean hasValue(String value) {
        return value != null && !value.trim().isEmpty() && !"-".equals(value.trim());
    }

    private boolean hasValidWeeklyGrades(List<Grade> weeklyGrades) {
        if (weeklyGrades == null || weeklyGrades.isEmpty()) return false;
        return weeklyGrades.stream()
                .anyMatch(item -> (item.getValue() != null && !item.getValue().trim().isEmpty() && !item.getValue().trim().equals("-")) || item.isNotProvided());
    }

    private String escapeMarkdownTableContent(String text) {
        if (text == null) return "";
        return text.replace("\n", " ").replace("\r", "").replace("|", "\\|");
    }

    private String escapeMarkdown(String text) {
        if (text == null) return "";
        return text.replace("*", "\\*").replace("_", "\\_").replace("`", "\\`").replace("#", "\\#");
    }
}

