package bbt.tao.orchestra.tools.formatter.impl;

import bbt.tao.orchestra.dto.enu.platonus.FormattedGradesResponse;
import bbt.tao.orchestra.dto.enu.platonus.grades.*;
import bbt.tao.orchestra.tools.formatter.ToolResponseFormatter;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class PlatonusGradesResponseFormatter implements ToolResponseFormatter<FormattedGradesResponse> {

    private static final String NEW_LINE = "\n";
    private static final String TABLE_SEPARATOR = "|---|---|---|---|---|\n";
    private static final String SECTION_SEPARATOR = "\n---\n";


    @Override
    public String format(FormattedGradesResponse responseData) {
        if (responseData == null || responseData.semesterPerformance() == null) {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.";
        }

        StudentSemesterPerformance sg = responseData.semesterPerformance();
        StringBuilder md = new StringBuilder();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        md.append("### üìä –û—Ü–µ–Ω–∫–∏ –∑–∞ ").append(escapeMarkdownTableContent(sg.getAcademicYear()))
                .append(" —É—á–µ–±–Ω—ã–π –≥–æ–¥, ").append(escapeMarkdownTableContent(sg.getTerm()))
                .append(" —Å–µ–º–µ—Å—Ç—Ä (–°—Ç—É–¥–µ–Ω—Ç ID: ")
                .append(escapeMarkdownTableContent(sg.getStudentId() != null ? sg.getStudentId() : "N/A")).append(")")
                .append(NEW_LINE).append(NEW_LINE);

        if (sg.getParsingIssues() != null && !sg.getParsingIssues().isEmpty()) {
            md.append("**–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏:**").append(NEW_LINE);
            for (String issue : sg.getParsingIssues()) {
                md.append("- ").append(escapeMarkdownGeneral(issue)).append(NEW_LINE);
            }
            md.append(NEW_LINE);
            if (sg.getSubjects() == null || sg.getSubjects().isEmpty()) {
                md.append("–î–∞–Ω–Ω—ã–µ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∏–∑-–∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.").append(NEW_LINE);
                return md.toString();
            }
        }

        if (sg.getSubjects() == null || sg.getSubjects().isEmpty()) {
            md.append("–û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.").append(NEW_LINE);
        } else {
            md.append("| –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ | –î–æ–ø—É—Å–∫ | –≠–∫–∑–∞–º–µ–Ω | –ò—Ç–æ–≥ (%) | –ò—Ç–æ–≥ (–ë—É–∫–≤–∞) |").append(NEW_LINE);
            md.append(TABLE_SEPARATOR);
            for (SubjectPerformance subjectPerf : sg.getSubjects()) {
                SubjectGradeAggregation agg = subjectPerf.getAggregatedGrades();
                md.append("| **").append(escapeMarkdownTableContent(subjectPerf.getSubjectName())).append("** | ");
                md.append(escapeMarkdownTableContent(formatScore(agg.getAdmissionRating()))).append(" | ");
                md.append(escapeMarkdownTableContent(formatScore(agg.getExamGrade()))).append(" | ");
                md.append(escapeMarkdownTableContent(formatScore(agg.getFinalNumericGrade()))).append(" | ");
                md.append(escapeMarkdownTableContent(agg.getFinalLetterGrade())).append(" |").append(NEW_LINE);
            }
            md.append(NEW_LINE);

            md.append(SECTION_SEPARATOR);
            md.append("### –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º:").append(NEW_LINE).append(NEW_LINE);

            for (SubjectPerformance subjectPerf : sg.getSubjects()) {
                SubjectGradeAggregation agg = subjectPerf.getAggregatedGrades();
                md.append("#### **").append(escapeMarkdownGeneral(subjectPerf.getSubjectName())).append("**").append(NEW_LINE);

                md.append("- **–†–ö1:** ").append(escapeMarkdownGeneral(formatScore(agg.getRk1Score())))
                        .append(" (–†–µ–π—Ç–∏–Ω–≥ 1: ").append(escapeMarkdownGeneral(formatScore(agg.getR1Score()))).append(")");
                md.append(" | **–¢–ö1 –û–±—â–∏–π:** ").append(escapeMarkdownGeneral(formatScore(agg.getTk1TotalScore()))).append(NEW_LINE);

                md.append("- **–†–ö2:** ").append(escapeMarkdownGeneral(formatScore(agg.getRk2Score())))
                        .append(" (–†–µ–π—Ç–∏–Ω–≥ 2: ").append(escapeMarkdownGeneral(formatScore(agg.getR2Score()))).append(")");
                md.append(" | **–¢–ö2 –û–±—â–∏–π:** ").append(escapeMarkdownGeneral(formatScore(agg.getTk2TotalScore()))).append(NEW_LINE);

                if (isProvided(agg.getCourseworkGrade())) md.append("- –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: ").append(escapeMarkdownGeneral(formatScore(agg.getCourseworkGrade()))).append(NEW_LINE);
                if (isProvided(agg.getPracticeGrade())) md.append("- –ü—Ä–∞–∫—Ç–∏–∫–∞: ").append(escapeMarkdownGeneral(formatScore(agg.getPracticeGrade()))).append(NEW_LINE);
                if (isProvided(agg.getResearchGrade())) md.append("- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞: ").append(escapeMarkdownGeneral(formatScore(agg.getResearchGrade()))).append(NEW_LINE);
                md.append(NEW_LINE);

                if (subjectPerf.getActivities() != null && !subjectPerf.getActivities().isEmpty()) {
                    for (SubjectActivityDetails activity : subjectPerf.getActivities()) {
                        md.append("  **–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è:** `").append(escapeMarkdownGeneral(activity.getActivityName())).append("`");
                        if (activity.getTeacher() != null && !activity.getTeacher().isBlank()){
                            md.append(" (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ").append(escapeMarkdownGeneral(activity.getTeacher())).append(")");
                        }
                        md.append(NEW_LINE);
                        md.append("    - –¢–ö1 (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å): ").append(escapeMarkdownGeneral(formatScore(activity.getTk1Score()))).append(NEW_LINE);
                        md.append("    - –¢–ö2 (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å): ").append(escapeMarkdownGeneral(formatScore(activity.getTk2Score()))).append(NEW_LINE);

                        if (hasValidWeeklyGrades(activity.getWeeklyGrades1_7())) {
                            md.append("    - –ù–µ–¥–µ–ª–∏ 1-7: ").append(formatWeeklyGrades(activity.getWeeklyGrades1_7(), 1, 7)).append(NEW_LINE);
                        }
                        if (hasValidWeeklyGrades(activity.getWeeklyGrades8_15())) {
                            md.append("    - –ù–µ–¥–µ–ª–∏ 8-15: ").append(formatWeeklyGrades(activity.getWeeklyGrades8_15(), 8, 15)).append(NEW_LINE);
                        }
                        md.append(NEW_LINE);
                    }
                } else {
                    md.append("  *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≤–∏–¥–∞–º –∑–∞–Ω—è—Ç–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.*").append(NEW_LINE).append(NEW_LINE);
                }
                md.append(SECTION_SEPARATOR);
            }
        }

        if (responseData.recommendations() != null && !responseData.recommendations().isBlank()) {
            md.append(NEW_LINE).append("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**").append(NEW_LINE);
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –≤ Markdown –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å
            md.append(responseData.recommendations()).append(NEW_LINE);
        }

        if (responseData.scholarshipStatusInfo() != null && !responseData.scholarshipStatusInfo().isBlank()) {
            md.append(NEW_LINE).append("**üéì –°—Ç–∏–ø–µ–Ω–¥–∏—è:**").append(NEW_LINE);
            md.append(responseData.scholarshipStatusInfo()).append(NEW_LINE);
        }
        return md.toString();
    }

    private String formatScore(String score) {
        return (score == null || score.trim().isEmpty()) ? "-" : score.trim();
    }

    private boolean isProvided(String score){
        return score != null && !score.trim().isEmpty() && !"-".equals(score.trim());
    }

    private String formatWeeklyGrades(List<Grade> weeklyGrades, int startWeek, int endWeek) {
        if (weeklyGrades == null) return "-";
        String gradesString = weeklyGrades.stream()
                .filter(item -> {
                    try {
                        if (item.getControlPoint() == null || !item.getControlPoint().matches("\\d+")) return false;
                        int weekNum = Integer.parseInt(item.getControlPoint());
                        return weekNum >= startWeek && weekNum <= endWeek;
                    } catch (NumberFormatException e) { return false; }
                })
                .map(item -> {
                    String scoreDisplay = item.getValue();
                    if (item.isNotProvided()) scoreDisplay = "–Ω.–ø.";
                    else if (scoreDisplay == null || scoreDisplay.trim().isEmpty()) scoreDisplay = "(-)";
                    else if (scoreDisplay.equalsIgnoreCase("–Ω")) scoreDisplay = "–Ω";
                    return "`" + item.getControlPoint() + "`: " + escapeMarkdownGeneral(scoreDisplay); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π escape
                })
                .collect(Collectors.joining(", "));
        return gradesString.isEmpty() ? "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö" : gradesString;
    }

    private boolean hasValidWeeklyGrades(List<Grade> weeklyGrades) {
        if (weeklyGrades == null || weeklyGrades.isEmpty()) return false;
        return weeklyGrades.stream()
                .anyMatch(item -> (item.getValue() != null && !item.getValue().trim().isEmpty() && !item.getValue().trim().equals("-")) || item.isNotProvided());
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —è—á–µ–µ–∫ —Ç–∞–±–ª–∏—Ü—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è `|`)
    private String escapeMarkdownTableContent(String text) {
        if (text == null) return "";
        return text.replace("|", "\\|");
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å .replace("\n", "<br>") –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ —è—á–µ–µ–∫, –Ω–æ —ç—Ç–æ —É–∂–µ –±–ª–∏–∂–µ –∫ HTML –≤ Markdown
    }

    // –ë–æ–ª–µ–µ –æ–±—â–µ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ —Ç–∞–±–ª–∏—Ü (–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏)
    private String escapeMarkdownGeneral(String text) {
        if (text == null) return "";
        return text
                .replace("*", "\\*")
                .replace("_", "\\_")
                .replace("`", "\\`")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("#", "\\#"); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º #, –µ—Å–ª–∏ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    }
}