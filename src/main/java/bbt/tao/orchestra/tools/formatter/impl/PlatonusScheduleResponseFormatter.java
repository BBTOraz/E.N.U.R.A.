package bbt.tao.orchestra.tools.formatter.impl;

import bbt.tao.orchestra.dto.DateResolutionDetails;
import bbt.tao.orchestra.dto.ResolvedQueryType;
import bbt.tao.orchestra.dto.ScheduleFormatData;
import bbt.tao.orchestra.dto.enu.platonus.DayEntry;
import bbt.tao.orchestra.dto.enu.platonus.LessonDetail;
import bbt.tao.orchestra.dto.enu.platonus.LessonHour;
import bbt.tao.orchestra.dto.enu.platonus.PlatonusApiResponse;
import bbt.tao.orchestra.tools.formatter.ToolResponseFormatter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.time.DayOfWeek;
import java.time.format.TextStyle;
import java.util.*;
import java.util.stream.Collectors;

@Component
@Slf4j
public class PlatonusScheduleResponseFormatter implements ToolResponseFormatter<ScheduleFormatData> {

    private final Locale RUSSIAN_LOCALE = new Locale("ru");

    private String getLocalizedDayName(DayOfWeek dayOfWeek, Locale locale) {
        if (dayOfWeek == null) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å";
        return dayOfWeek.getDisplayName(TextStyle.FULL_STANDALONE, locale);
    }

    private String getLocalizedDayNameFromApiKey(String dayKeyStr, Locale locale) {
        try {
            int dayKey = Integer.parseInt(dayKeyStr);
            if (dayKey >= 1 && dayKey <= 7) {
                return DayOfWeek.of(dayKey).getDisplayName(TextStyle.FULL_STANDALONE, locale);
            }
        } catch (NumberFormatException e) {
            log.warn("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–Ω—è –∏–∑ API –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {}", dayKeyStr);
        }
        return "–î–µ–Ω—å " + dayKeyStr;
    }

    @Override
    public String format(ScheduleFormatData formatData) {
        PlatonusApiResponse apiResponse = formatData.apiResponse();
        DateResolutionDetails resolutionDetails = formatData.resolutionResult();

        if (resolutionDetails.queryType() == ResolvedQueryType.ERROR_INVALID_WEEK_NUMBER ||
            resolutionDetails.queryType() == ResolvedQueryType.ERROR_DATE_OUT_OF_SEMESTER ||
            resolutionDetails.queryType() == ResolvedQueryType.ERROR_GENERIC ||
            (resolutionDetails.apiRequestParams() != null &&
             (resolutionDetails.apiRequestParams().term() == null || resolutionDetails.apiRequestParams().term() == 0 ||
              resolutionDetails.apiRequestParams().week() == null || resolutionDetails.apiRequestParams().week() == 0))) {
            return resolutionDetails.userFriendlySummary();
        }

        if (apiResponse == null || apiResponse.timetable() == null || apiResponse.lessonHours() == null) {
            log.warn("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API Platonus.");
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è: **").append(resolutionDetails.userFriendlySummary()).append("**\n");

        Map<Integer, LessonHour> lessonHoursMap = apiResponse.lessonHours().stream()
                .collect(Collectors.toMap(LessonHour::number, lh -> lh, (lh1, lh2) -> lh1)); // –í —Å–ª—É—á–∞–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π


        Optional<DayOfWeek> specificDayToDisplay = resolutionDetails.dayOfWeekToFilter();

        if (specificDayToDisplay.isPresent()) {

            DayOfWeek day = specificDayToDisplay.get();
            String dayApiKey = String.valueOf(day.getValue());
            String localizedDayName = getLocalizedDayName(day, RUSSIAN_LOCALE);

            boolean hasLessons = formatSingleDayContent(sb, apiResponse.timetable().days().get(dayApiKey), lessonHoursMap, localizedDayName);
            if (!hasLessons) {
                sb.append("\n   –ù–∞ ").append(localizedDayName.toLowerCase(RUSSIAN_LOCALE)).append(" –∑–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n");
            }
        } else {

            Map<String, DayEntry> daysFromApi = apiResponse.timetable().days();
            if (daysFromApi == null || daysFromApi.isEmpty()) {
                sb.append("\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.\n");
            } else {
                boolean weekHasAnyLessons = false;
                List<Map.Entry<String, DayEntry>> sortedDays = daysFromApi.entrySet().stream()
                        .sorted(Comparator.comparingInt(entry -> Integer.parseInt(entry.getKey())))
                        .toList();

                for (Map.Entry<String, DayEntry> dayApiEntry : sortedDays) {
                    String dayApiKey = dayApiEntry.getKey();
                    String localizedDayName = getLocalizedDayNameFromApiKey(dayApiKey, RUSSIAN_LOCALE);
                    if (formatSingleDayContent(sb, dayApiEntry.getValue(), lessonHoursMap, localizedDayName)) {
                        weekHasAnyLessons = true;
                    }
                }
                if (!weekHasAnyLessons) {
                    sb.append("\n–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.\n");
                }
            }
        }

        String result = sb.toString().trim();
        while (result.endsWith("\n\n")) {
            result = result.substring(0, result.length() -1);
        }
        return result;
    }

    private boolean formatSingleDayContent(StringBuilder sb,
                                           DayEntry dayDataFromApi,
                                           Map<Integer, LessonHour> lessonHoursMap,
                                           String localizedDayName) {
        if (dayDataFromApi == null || dayDataFromApi.lessons() == null || dayDataFromApi.lessons().isEmpty()) {
            return false; // –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—é
        }

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ LessonDetail –∑–∞ –¥–µ–Ω—å –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã (–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è LessonHour.number)
        List<LessonDetail> lessonsForDay = dayDataFromApi.lessons().entrySet().stream()
                .filter(entry -> entry.getValue() != null && entry.getValue().lessons() != null && !entry.getValue().lessons().isEmpty())
                .flatMap(entry -> entry.getValue().lessons().stream())
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É LessonDetail –µ—Å—Ç—å –Ω–æ–º–µ—Ä, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á—É –≤ lessonHoursMap
                .filter(ld -> lessonHoursMap.containsKey(ld.number()))
                .sorted(Comparator.comparingInt(LessonDetail::number))
                .toList();

        if (lessonsForDay.isEmpty()) {
            return false; // –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }

        sb.append("\nüéì **").append(localizedDayName.toUpperCase(RUSSIAN_LOCALE)).append("**\n");

        for (LessonDetail lesson : lessonsForDay) {
            LessonHour lessonTime = lessonHoursMap.get(lesson.number()); // lesson.number –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–ª—é—á–æ–º –∏–∑ lessonHours
            if (lessonTime == null) { // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ö–æ—Ç—è –≤—ã—à–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏
                log.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä—ã –Ω–æ–º–µ—Ä {} (–ø—Ä–µ–¥–º–µ—Ç: {})", lesson.number(), lesson.subjectName());
                continue;
            }

            sb.append(String.format("  %s-%s (%s –ø–∞—Ä–∞)\n",
                    lessonTime.start().substring(0, 5), // "08:00"
                    lessonTime.finish().substring(0, 5),// "08:50"
                    lessonTime.displayNumber()          // 1, 2, 3...
            ));
            sb.append("    üìö **").append(lesson.subjectName()).append("**");
            if (lesson.groupTypeShortName() != null && !lesson.groupTypeShortName().isBlank()) {
                sb.append(" (").append(lesson.groupTypeShortName()).append(")");
            }
            sb.append("\n");

            if (lesson.tutorName() != null && !lesson.tutorName().trim().isEmpty()) {
                sb.append("    üßë‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ").append(lesson.tutorName().trim()).append("\n");
            }
            if (lesson.auditory() != null && !lesson.auditory().isBlank()) {
                sb.append("    üö™ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ").append(lesson.auditory());
                if (lesson.building() != null && !lesson.building().isBlank()) {
                    sb.append(" (").append(lesson.building()).append(")");
                }
                sb.append("\n");
            } else if (lesson.onlineClass()) {
                sb.append("    üíª –§–æ—Ä–º–∞—Ç: –û–Ω–ª–∞–π–Ω\n");
            }
            sb.append("\n"); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        }
        return true; // –ë—ã–ª–∏ –∑–∞–Ω—è—Ç–∏—è
    }
}
